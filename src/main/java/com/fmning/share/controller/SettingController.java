package com.fmning.share.controller;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;

import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartRequest;

import com.fmning.share.response.FileDownloadResult;
import com.fmning.share.response.FileRetrieveResult;
import com.fmning.share.response.GenericResponse;
import com.fmning.share.response.UserListResult;
import com.fmning.share.utils.User;
import com.fmning.share.utils.Utils;

@RestController
@RequestMapping("/api")
public class SettingController {
	
	@PostMapping("/initial_setup")
	public GenericResponse login(@RequestBody Map<String, Object> payload, HttpServletResponse response) {
		String username = (String)payload.get("username");
		String password = (String)payload.get("password");
		String homeDir = (String)payload.get("homeDir");
		
		if (username == null || password == null || homeDir == null) return new GenericResponse("The request is not complete");
		
		if (!homeDir.endsWith("/")) homeDir += "/";
		
		File home = new File(homeDir);
		
		if (home.exists()) {
			if (home.isFile()) {
				return new GenericResponse("The given path is actualy a file. Please enter the path to a directory");
			}
			Utils.guardExistRecycleBin(homeDir + Utils.RECYCLE_BIN_FOLDER_NAME);
		} else {
			try {
				boolean success = home.mkdirs();
				if (!success) return new GenericResponse("Cannot create the given path. Make sure hosting software has read and write access to the path");
				
				Utils.guardExistRecycleBin(homeDir + Utils.RECYCLE_BIN_FOLDER_NAME);
				
			} catch (Exception e) {
				return new GenericResponse("Cannot set up share drive path. Make sure hosting software has read and write access to the path");
			}
		}
		
		Properties prop = new Properties();
		prop.setProperty(Utils.ADMIN_USERNAME, username);
		prop.setProperty(Utils.ADMIN_PASSWORD, password);
		prop.setProperty(Utils.HOME_DIRECTORY, homeDir);
		
		String errors = Utils.validateSettings(prop);
		if (!errors.equals("")) {
			return new GenericResponse(errors);
		}
		
		try {
			prop.store(new FileOutputStream(Utils.PROPERTIES_FILE), "Settings file generated by Share Drive application");
		} catch (Exception e) {
			return new GenericResponse("Cannot save settings. Make sure hosting software has read and write access to the path");
		}
		
		Cookie usernameCookie = new Cookie(Utils.USERNAME_COOKIE_KEY, username);
		usernameCookie.setPath("/");
		response.addCookie(usernameCookie);
		Cookie passwordCookie = new Cookie(Utils.PASSWORD_COOKIE_KEY, password);
		passwordCookie.setPath("/");
		response.addCookie(passwordCookie);
		Cookie adminCookie = new Cookie(Utils.ADMIN_COOKIE_KEY, "true");
		adminCookie.setPath("/");
		response.addCookie(adminCookie);
		
		return new GenericResponse();
	}
	
	@PostMapping("/get_user_list")
	public UserListResult getUserList(@RequestHeader("Authorization") String auth, @RequestHeader("Identity") String identity, @RequestBody Map<String, Object> payload) {
		if (Utils.admin.username.equals(identity) && Utils.admin.password.equals(auth)) {
			return new UserListResult(Utils.getStrippedUserList());
		} else {
			return new UserListResult("Not autorized.");
		}
	}
	
	@SuppressWarnings("unchecked")
	@PostMapping("/update_user_list")
	public GenericResponse updateUserList(@RequestHeader("Authorization") String auth, @RequestHeader("Identity") String identity, @RequestBody Map<String, Object> payload) {
		if (Utils.admin.username.equals(identity) && Utils.admin.password.equals(auth)) {
			List<Map<String, String>> existingUsers = (List<Map<String, String>>)payload.get("existingUsers");
			List<User> existingUserList = new ArrayList<>();
			for (Map<String, String> map : existingUsers) existingUserList.add(new User(map.get("username"), map.get("password"), false));
			String error = Utils.mergeUserList(existingUserList);
			if (!error.equals("")) return new GenericResponse(error);
			
			List<Map<String, String>> newUsers = (List<Map<String, String>>)payload.get("newUsers");
			List<User> newUserList = new ArrayList<>();
			for (Map<String, String> map : newUsers) newUserList.add(new User(map.get("username"), map.get("password"), false));
			error = Utils.addUserList(newUserList);
			if (!error.equals("")) return new GenericResponse(error);
			
			return new GenericResponse();
		} else {
			return new GenericResponse("Not autorized.");
		}
	}
	
	@GetMapping("/export_settings")
	public FileDownloadResult exportSettings(@RequestParam("auth") String auth, @RequestParam("identity") String identity, HttpServletResponse response) throws IOException {
		if (Utils.admin.username.equals(identity) && Utils.admin.password.equals(auth)) {
			File file = new File(Utils.PROPERTIES_FILE);
			
			if (!file.exists() || !file.isFile()) {
				return new FileDownloadResult("Internal Server Error");
			}
			
			String mimeType= URLConnection.guessContentTypeFromName(file.getName());
	        if (mimeType == null) mimeType = "application/octet-stream";
	         
	        response.setContentType(mimeType);
	        response.setCharacterEncoding("UTF-8");
	        response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"");
	        response.setContentLength((int)file.length());
	 
	        InputStream inputStream = new BufferedInputStream(new FileInputStream(file));
	        FileCopyUtils.copy(inputStream, response.getOutputStream());
	        
			return null;
		} else {
			return new FileDownloadResult("Not autorized.");
		}
	}
	
	@PostMapping("/import_settings")
	public FileRetrieveResult importSettings(@RequestHeader("Authorization") String auth, @RequestHeader("Identity") String identity, @RequestParam("file") MultipartFile file, MultipartRequest request) {
		if (Utils.admin.username.equals(identity) && Utils.admin.password.equals(auth)) {
			try {
				String content = new String(file.getBytes(), "UTF-8");
				content = content.replace("\\:", ":").replace("\\", "\\\\");
				Properties prop = new Properties();
				prop.load(new StringReader(content));
				String error = Utils.validateSettings(prop, true);
				
				if (error.equals("")) {
					try {
						Utils.saveSettings();
						return new FileRetrieveResult("");
					} catch (Exception ignored) {
						return new FileRetrieveResult("Cannot save settings. Make sure hosting software has read and write access to the path");
					}
				} else {
					Utils.setupNeeded = false;
					return new FileRetrieveResult(error);
				}
				
			} catch (Exception ignored) {
				return new FileRetrieveResult("Internal server error");
			}
			
		} else {
			return new FileRetrieveResult("Not autorized.");
		}
	}
	
	@PostMapping("/init_import_settings")
	public FileRetrieveResult initImportSettings(@RequestParam("file") MultipartFile file, MultipartRequest request) {

		try {
			Properties prop = new Properties();
			prop.load(new FileInputStream(Utils.PROPERTIES_FILE));
			String errors = Utils.validateSettings(prop);
			if (errors.equals("")) {
				return new FileRetrieveResult("Not autorized.");
			}
		} catch (Exception ignored) {}
		
		try {
			String content = new String(file.getBytes(), "UTF-8");
			content = content.replace("\\:", ":").replace("\\", "\\\\");
			Properties prop = new Properties();
			prop.load(new StringReader(content));
			String error = Utils.validateSettings(prop, true);
			
			if (error.equals("")) {
				try {
					Utils.saveSettings();
					return new FileRetrieveResult("");
				} catch (Exception ignored) {
					return new FileRetrieveResult("Cannot save settings. Make sure hosting software has read and write access to the path");
				}
			} else {
				Utils.setupNeeded = false;
				return new FileRetrieveResult(error);
			}
			
		} catch (Exception ignored) {
			return new FileRetrieveResult("Internal server error");
		}
	}

}
